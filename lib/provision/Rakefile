##########################################################################
# Copyright 2018 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

$stdout.sync = true
$stderr.sync = true

require 'open-uri'
require 'timeout'
require 'json'
require 'net/http'
require 'rubygems'
require 'rubygems/version'

PIPELINE_NAME = 'testpipeline'.freeze

class GoCDApiVersion
  V = 'application/vnd.go.cd+json'.freeze
  V1 = 'application/vnd.go.cd.v1+json'.freeze
  V2 = 'application/vnd.go.cd.v2+json'.freeze
  V3 = 'application/vnd.go.cd.v3+json'.freeze
  V4 = 'application/vnd.go.cd.v4+json'.freeze
  V5 = 'application/vnd.go.cd.v5+json'.freeze
  V6 = 'application/vnd.go.cd.v6+json'.freeze
  V7 = 'application/vnd.go.cd.v7+json'.freeze
  V8 = 'application/vnd.go.cd.v8+json'.freeze
end

class Debian
  include Rake::DSL

  def repo
    open('/etc/apt/sources.list.d/gocd.list', 'w') do |f|
      f.puts('deb https://download.gocd.org /')
      f.puts('deb https://download.gocd.org/experimental /')
    end
    sh('curl --silent --fail --location https://download.gocd.org/GOCD-GPG-KEY.asc | apt-key add -')
    sh('apt-get clean && rm -rf /var/lib/apt/lists/* && apt-get update')
  end

  def install(pkg_name, pkg_version)
    sh("apt-get -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install -y #{pkg_name}=#{pkg_version}")
  end

  def uninstall(pkg_name, pkg_verion)
    sh("apt-get purge -y #{pkg_name}=#{pkg_verion}")
  end

  def setup_postgres
    sh('apt-get install -y postgresql-9.3')
    sh('apt-get install -y postgresql-contrib-9.3')
    sh('service postgresql status || service postgresql start')
    sh(%(su - postgres -c bash -c 'createdb -U postgres cruise'))
    sh(%(su - postgres -c bash -c 'sed -i 's/peer/md5/g' /etc/postgresql/9.3/main/pg_hba.conf'))
    sh(%(su - postgres -c /bin/bash -c "psql -c \\"ALTER USER postgres WITH PASSWORD 'postgres'\\";"))
    sh('service postgresql restart')
  end
end

class Redhat
  include Rake::DSL

  def repo
    sh('curl --silent --fail --location https://download.gocd.org/gocd.repo -o /etc/yum.repos.d/gocd.repo')
    sh("yum clean all && yum makecache --disablerepo='*' --enablerepo='gocd*'")
  end

  def install(pkg_name, pkg_verion)
    sh("yum install --assumeyes --enablerepo='gocd*' #{pkg_name}-#{pkg_verion}")
  end

  def uninstall(pkg_name, pkg_verion)
    sh("yum remove --assumeyes #{pkg_name}-#{pkg_verion}")
  end

  def setup_postgres
    sh('yum install --assumeyes postgresql-server')
    sh('yum install --assumeyes postgresql-contrib')
    sh(%(su - postgres -c bash -c 'initdb -D /var/lib/pgsql/data'))
    sh(%(su - postgres -c bash -c 'pg_ctl -D /var/lib/pgsql/data -l /var/lib/pgsql/data/logfile start'))
    sh(%(su - postgres -c bash -c 'sed -i 's/peer/md5/g' /var/lib/pgsql/data/pg_hba.conf'))
    sh(%(su - postgres -c /bin/bash -c "psql -c \\"ALTER USER postgres WITH PASSWORD 'postgres'\\";"))
    sh(%(su - postgres -c bash -c 'createdb -U postgres cruise'))
    sh(%(su - postgres -c bash -c 'pg_ctl -D /var/lib/pgsql/data -l /var/lib/pgsql/data/logfile restart'))
  end
end

{
  'debian' => Debian,
  'centos' => Redhat
}.each do |os, klass|
  namespace os do
    @postgres_setup_done = false

    task :repo do
      klass.new.repo
    end

    task :install_latest_version => [:install_server, :install_agent]

    task :install_server do
      sh('pkill -f go-server') if server_running?
      klass.new.install('go-server', ENV['GO_VERSION'])
      if ENV['USE_POSTGRES']
        unless @postgres_setup_done
          klass.new.setup_postgres
          @postgres_setup_done = true
        end
        setup_postgres_addon ENV['GO_VERSION']
      end
      chmod_R 0o755, '/vagrant/provision/filesystem/with-java.sh'
      chmod_R 0o755, '/vagrant/provision/filesystem/start-stop-gocd-server-agent.sh'
      sh("export JAVA_VERSION='12' && ./vagrant/provision/filesystem/with-java.sh ./vagrant/provision/filesystem/start-stop-gocd-server-agent.sh server start")
      server_status
    end

    task :install_agent do
      if agent_any?(agent_api_version)
        sh("./vagrant/provision/filesystem/start-stop-gocd-server-agent.sh agent stop")
        upgrade_java
        sh("./vagrant/provision/filesystem/start-stop-gocd-server-agent.sh agent start")
      else
        klass.new.install('go-agent', ENV['GO_VERSION'])
        chmod_R 0o755, '/vagrant/provision/filesystem/start-stop-gocd-server-agent.sh'
        sh("export JAVA_VERSION='12' && ./vagrant/provision/filesystem/with-java.sh ./vagrant/provision/filesystem/start-stop-gocd-server-agent.sh agent start")
      end
      agent_status
    end

    task :install_old_version do
      klass.new.install('go-server', ENV['GO_INITIAL_VERSION'])
      if ENV['USE_POSTGRES']
        unless @postgres_setup_done
          klass.new.setup_postgres
          @postgres_setup_done = true
        end
        setup_postgres_addon ENV['GO_INITIAL_VERSION']
      end
      chmod_R 0o755, '/vagrant/provision/filesystem/with-java.sh'
      chmod_R 0o755, '/vagrant/provision/filesystem/start-stop-gocd-server-agent.sh'
      sh("export JAVA_VERSION='1.8' && ./vagrant/provision/filesystem/with-java.sh ./vagrant/provision/filesystem/start-stop-gocd-server-agent.sh server start")
      server_status
      klass.new.install('go-agent', ENV['GO_INITIAL_VERSION'])
      sh("export JAVA_VERSION='1.8' && ./vagrant/provision/filesystem/with-java.sh ./vagrant/provision/filesystem/start-stop-gocd-server-agent.sh agent start")
      agent_status
    end

    def upgrade_java
      sh("curl https://download.java.net/openjdk/jdk11/ri/openjdk-11+28_linux-x64_bin.tar.gz -o /home/openjdk-11+28_linux-x64_bin.tar.gz")
      sh ("tar -xvf /home/openjdk-11+28_linux-x64_bin.tar.gz -C /home/")
      sh ("ln -s -f /home/jdk-11/bin/java /usr/bin/java")
    end

    def setup_postgres_addon(version)
      p 'Setting up postgres addon'
      sh('pkill -f go-server') if server_running?
      addon = addon_for version
      if Gem::Version.new(version.split('-')[0]) < Gem::Version.new('19.6.0')
        sh('echo GO_SERVER_SYSTEM_PROPERTIES=\"\$GO_SERVER_SYSTEM_PROPERTIES -Dgo.database.provider=com.thoughtworks.go.postgresql.PostgresqlDatabase\" >> /etc/default/go-server')
      else
        sh(%(echo "wrapper.java.additional.101=-Dgo.database.provider=com.thoughtworks.go.postgresql.PostgresqlDatabase"  >> /usr/share/go-server/wrapper-config/wrapper-properties.conf))
      end

      sh(%(su - go bash -c 'mkdir -p /var/lib/go-server/addons ; rm -rf /var/lib/go-server/addons/*.jar ; cp /vagrant/addons/#{addon} /var/lib/go-server/addons/'))
      sh(%(su - go bash -c 'echo "db.host=localhost"  >> /etc/go/postgresqldb.properties'))
      sh(%(su - go bash -c 'echo "db.port=5432"  >> /etc/go/postgresqldb.properties'))
      sh(%(su - go bash -c 'echo "db.name=cruise"  >> /etc/go/postgresqldb.properties'))
      sh(%(su - go bash -c 'echo "db.user=postgres"  >> /etc/go/postgresqldb.properties'))
      sh(%(su - go bash -c 'echo "db.password=postgres"  >> /etc/go/postgresqldb.properties'))
    end


    def server_running?
      begin
        sh(%(curl -I http://127.0.0.1:8153/go/about -o about.txt))
        return true if File.readlines('about.txt').any? { |l| l['200 OK'] }
      rescue StandardError => e
        return false
      end
      false
    end

    def wait_to_start
      puts 'Wait server to come up'
      Timeout.timeout(120) do
        loop do
          begin
            puts '.'
            break if server_running?
          rescue StandardError => e
          end
          sleep 5
        end
      end
    end

    def server_status
      wait_to_start
      pg_connection = 'Using connection configuration jdbc:postgresql://localhost:5432/cruise [User: postgres] [Password Encrypted: false]'

      # check if server startup with postgres only
      if ENV['USE_POSTGRES']
        Timeout.timeout(120) do
          loop do
            if File.readlines('/var/log/go-server/go-server.log').any? { |l| l[pg_connection] }
              p 'server up with postgres'
              break
            end
          end
        end
      end
    end

    def agent_status
      puts 'wait for agent to come up'
      v = agent_api_version
      Timeout.timeout(180) do
        loop do
          break if agent_running?(v)
          sleep 5
        end
      end
    end

    def agent_running?(v)
      sh "curl http://127.0.0.1:8153/go/api/agents -H 'Accept: #{v}' > temp.txt"
      agents = JSON.parse(File.read('temp.txt'))['_embedded']['agents']

      if agents.any? { |a| a['agent_state'] == 'Idle' }
        puts 'Agent is up'
        return true
      end
      false
    end

    def agent_any?(v)
      sh "curl http://127.0.0.1:8153/go/api/agents -H 'Accept: #{v}' > temp.txt"
      agents = JSON.parse(File.read('temp.txt'))['_embedded']['agents']

      if agents.any? { |a| ['Idle', 'Missing', 'Lost Contact'].include? a['agent_state'] }
        puts 'Agent is up'
        return true
      end
      false
    end


    def create_pipeline
      url = 'http://127.0.0.1:8153/go/api/admin/pipelines'
      puts 'create a pipeline'
      sh(%(curl --silent --fail --location --dump-header - -X POST -H "Accept: #{pipeline_api_version}" -H "Content-Type: application/json" --data "@/vagrant/provision/filesystem/pipeline.json" #{url}))
    end

    task :create_pipeline_by_config do
      create_pipeline
    end

    def unpause_pipeline
      url = "http://127.0.0.1:8153/go/api/pipelines/#{PIPELINE_NAME}/unpause"
      puts 'unpause the pipeline'
      sh(%(curl --silent --fail --location --dump-header - -X POST -H "Accept: #{pipeline_pause_api_version}" -H "Confirm: true" -H "X-GoCD-Confirm: true" #{url}))
    end

    def trigger_pipeline
      url = "http://127.0.0.1:8153/go/api/pipelines/#{PIPELINE_NAME}/schedule"
      puts 'trigger the pipeline'
      sh(%(curl --silent --fail --location --dump-header - -X POST -H "Accept: #{pipeline_schedule_api_version}" -H "Confirm: true" -H "X-GoCD-Confirm: true" #{url}))
    end

    task :trigger_pipeline_first do
      unpause_pipeline if current_gocd_version < Gem::Version.new('18.8.0')
    end

    task :trigger_pipeline_again do
      trigger_pipeline
    end

    task :check_pipeline_pass_with_label_1 do
      check_pipeline_in_cctray 1
    end

    task :check_pipeline_pass_with_label_2 do
      check_pipeline_in_cctray 2
    end

    def check_pipeline_in_cctray(label)
      cctray_response = nil
      Timeout.timeout(300) do
        loop do
          sh "curl http://127.0.0.1:8153/go/cctray.xml > temp.txt"
          cctray_response = File.read('temp.txt')
          status = cctray_response.match(/lastBuildStatus="(\w+)"/)
          puts "Pipeline build status #{status.captures}" if status

          if cctray_response.include? %(<Project name="#{PIPELINE_NAME} :: defaultStage" activity="Sleeping" lastBuildStatus="Success" lastBuildLabel="#{label}")
            puts 'Pipeline completed successfully'
            break
          end
          sleep 2
        end
      end
    rescue Timeout::Error
      raise "Pipeline was not built successfully. Wait timed out. The CCTray response was: #{cctray_response}"
    end

    def current_gocd_version
      sh "curl http://127.0.0.1:8153/go/api/version -H 'Accept: #{GoCDApiVersion::V1}' > version.txt"
      Gem::Version.new(JSON.parse(File.read('version.txt'))['version'])
    end

    def agent_api_version
      if current_gocd_version >= Gem::Version.new('19.8.0')
        GoCDApiVersion::V
      else
        GoCDApiVersion::V4
      end
    end

    def pipeline_api_version
      if current_gocd_version >= Gem::Version.new('19.8.0')
        GoCDApiVersion::V
      elsif current_gocd_version >= Gem::Version.new('19.6.0')
        GoCDApiVersion::V8
      elsif current_gocd_version >= Gem::Version.new('19.4.0')
        GoCDApiVersion::V7
      elsif current_gocd_version >= Gem::Version.new('18.11.0')
        GoCDApiVersion::V6
      end
    end

    def pipeline_pause_api_version
      if current_gocd_version >= Gem::Version.new('19.8.0')
        GoCDApiVersion::V
      else
        GoCDApiVersion::V1
      end
    end

    def pipeline_schedule_api_version
      if current_gocd_version >= Gem::Version.new('19.8.0')
        GoCDApiVersion::V
      else
        GoCDApiVersion::V1
      end
    end

    def dashboard_api_version
      if current_gocd_version >= Gem::Version.new('19.8.0')
        GoCDApiVersion::V
      else
        GoCDApiVersion::V2
      end
    end

    def check_pipeline_status
      dashboard_response = nil
      Timeout.timeout(180) do
        loop do
          sleep 5
          sh "curl http://127.0.0.1:8153/go/api/dashboard -H 'Accept: #{dashboard_api_version}' > temp.txt"
          dashboard_response = JSON.parse(File.read('temp.txt'))

          if dashboard_response['_embedded']['pipeline_groups'][0]['_embedded']['pipelines'][0]['_embedded']['instances'][0]['_embedded']['stages'][0]['status'] == 'Passed'
            puts 'Pipeline completed with success'
            break
          end
        end
      end
    rescue Timeout::Error
      raise "Pipeline was not built successfully. The dashboard response was: #{dashboard_response}"
    end

    def server_version
      sh "curl http://127.0.0.1:8153/go/api/version -H 'Accept: #{GoCDApiVersion::V1}' > temp.txt"
      versions = JSON.parse(File.read('temp.txt'))
      "#{versions['version']}-#{versions['build_number']}"
    end

    def addon_for(core)
      versions_map = JSON.parse(File.read('/vagrant/addons/addon_builds.json'))
      versions_map.select { |v| v['gocd_version'] == core }.last['addons']['postgresql']
    end

    task :fresh => [:repo, :install_latest_version, :create_pipeline_by_config, :check_pipeline_pass_with_label_1]
    task :setup => [:repo, :install_old_version, :create_pipeline_by_config, :trigger_pipeline_first, :check_pipeline_pass_with_label_1]
    task :upgrade => [:setup, :install_latest_version, :trigger_pipeline_again, :check_pipeline_pass_with_label_2]

    task :upgrade_test do
      upgrade_list = ENV['UPGRADE_VERSIONS_LIST']
      p "this is the upgrade list #{upgrade_list}"
      upgrade_list.split(/\s*,\s*/).each do |version|
        begin
          ENV['GO_INITIAL_VERSION'] = version
          puts "upgrade test. Version FROM: #{ENV['GO_INITIAL_VERSION']} TO: #{ENV['GO_VERSION']}"
          Rake::Task["#{os}:upgrade"].invoke
        rescue StandardError => e
          raise "Installer testing failed. Error message #{e.message}"
        ensure
          Rake::Task["#{os}:upgrade"].reenable
          Rake::Task["#{os}:setup"].reenable
          Rake::Task["#{os}:repo"].reenable
          Rake::Task["#{os}:install_old_version"].reenable
          Rake::Task["#{os}:create_pipeline_by_config"].reenable
          Rake::Task["#{os}:trigger_pipeline_first"].reenable
          Rake::Task["#{os}:check_pipeline_pass_with_label_1"].reenable
          Rake::Task["#{os}:install_server"].reenable
          Rake::Task["#{os}:trigger_pipeline_again"].reenable
          Rake::Task["#{os}:check_pipeline_pass_with_label_2"].reenable
        end
      end
    end
  end
end
