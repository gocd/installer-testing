##########################################################################
# Copyright 2016 ThoughtWorks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##########################################################################

$stdout.sync = true
$stderr.sync = true

require 'open-uri'
require 'timeout'
require 'json'
require 'net/http'
require 'rubygems'
require 'rubygems/version'

PIPELINE_NAME = 'testpipeline'

class GoCDApiVersion
  V1 = 'application/vnd.go.cd.v1+json'
  V2 = 'application/vnd.go.cd.v2+json'
  V3 = 'application/vnd.go.cd.v3+json'
  V4 = 'application/vnd.go.cd.v4+json'
  V5 = 'application/vnd.go.cd.v5+json'
  V6 = 'application/vnd.go.cd.v6+json'
end

class Debian
  include Rake::DSL

  def repo
    open('/etc/apt/sources.list.d/gocd.list', 'w') do |f|
      f.puts('deb https://download.gocd.org /')
      f.puts('deb https://download.gocd.org/experimental /')
    end
    sh("curl --silent --fail --location https://download.gocd.org/GOCD-GPG-KEY.asc | apt-key add -")
    sh("apt-get update")
  end

  def install(pkg_name, pkg_version)
    sh("apt-get -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' install -y #{pkg_name}=#{pkg_version}")
  end

  def uninstall(pkg_name, pkg_verion)
    sh("apt-get purge -y #{pkg_name}=#{pkg_verion}")
  end

  def setup_postgres
    sh("apt-get install -y postgresql-9.3")
    sh("apt-get install -y postgresql-contrib-9.3")
    sh("service postgresql status || service postgresql start")
    sh(%Q{su - postgres -c bash -c 'createdb -U postgres cruise'})
    sh(%Q{su - postgres -c bash -c 'sed -i 's/peer/md5/g' /etc/postgresql/9.3/main/pg_hba.conf'})
    sh(%Q{su - postgres -c /bin/bash -c "psql -c \\"ALTER USER postgres WITH PASSWORD 'postgres'\\";"})
    sh("service postgresql restart")
  end

end

class Redhat
  include Rake::DSL

  def repo
    sh("curl --silent --fail --location https://download.gocd.org/gocd.repo -o /etc/yum.repos.d/gocd.repo")
    sh("yum makecache --disablerepo='*' --enablerepo='gocd*'")
  end

  def install(pkg_name, pkg_verion)
    sh("yum install --assumeyes --enablerepo='gocd*' #{pkg_name}-#{pkg_verion}")
  end

  def uninstall(pkg_name, pkg_verion)
    sh("yum remove --assumeyes #{pkg_name}-#{pkg_verion}")
  end

  def setup_postgres
    sh("yum install --assumeyes postgresql-server")
    sh("yum install --assumeyes postgresql-contrib")
    sh(%Q{su - postgres -c bash -c 'initdb -D /var/lib/pgsql/data'})
    sh(%Q{su - postgres -c bash -c 'pg_ctl -D /var/lib/pgsql/data -l /var/lib/pgsql/data/logfile start'})
    sh(%Q{su - postgres -c bash -c 'sed -i 's/peer/md5/g' /var/lib/pgsql/data/pg_hba.conf'})
    sh(%Q{su - postgres -c /bin/bash -c "psql -c \\"ALTER USER postgres WITH PASSWORD 'postgres'\\";"})
    sh(%Q{su - postgres -c bash -c 'createdb -U postgres cruise'})
    sh(%Q{su - postgres -c bash -c 'pg_ctl -D /var/lib/pgsql/data -l /var/lib/pgsql/data/logfile restart'})
  end

end

{
    'debian' => Debian,
    'centos' => Redhat,
}.each do |os, klass|
  namespace os do
    @postgres_setup_done = false

    task :repo do
      klass.new.repo
    end

    task :install_server do
      sh('/etc/init.d/go-server stop 2>/dev/null || true')
      klass.new.install('go-server', ENV['GO_VERSION'])
      if ENV['USE_POSTGRES']
        unless @postgres_setup_done
          klass.new.setup_postgres
          @postgres_setup_done = true
        end
        setup_postgres_addon ENV['GO_VERSION']
      end
      sh('/etc/init.d/go-server start')
    end

    task :install_agent do
      klass.new.install('go-agent', ENV['GO_VERSION'])
    end

    task :install_latest_version => [:install_server, :install_agent]

    task :install_old_version do
      klass.new.install('go-server', ENV['GO_INITIAL_VERSION'])
      if ENV['USE_POSTGRES']
        unless @postgres_setup_done
          klass.new.setup_postgres
          @postgres_setup_done = true
        end
        setup_postgres_addon ENV['GO_INITIAL_VERSION']
      end
      sh('/etc/init.d/go-server start')
      klass.new.install('go-agent', ENV['GO_INITIAL_VERSION'])
    end

    def setup_postgres_addon(version)
      p 'Setting up postgres addon'
      sh('/etc/init.d/go-server stop 2>/dev/null || true')
      addon = addon_for version
      sh('echo ' 'GO_SERVER_SYSTEM_PROPERTIES=\"\$GO_SERVER_SYSTEM_PROPERTIES -Dgo.database.provider=com.thoughtworks.go.postgresql.PostgresqlDatabase\"' '>> /etc/default/go-server')

      sh(%Q{su - go bash -c 'mkdir -p /var/lib/go-server/addons ; rm -rf /var/lib/go-server/addons/*.jar ; cp /vagrant/addons/#{addon} /var/lib/go-server/addons/'})
      sh(%Q{su - go bash -c 'echo "db.host=localhost"  >> /etc/go/postgresqldb.properties'})
      sh(%Q{su - go bash -c 'echo "db.port=5432"  >> /etc/go/postgresqldb.properties'})
      sh(%Q{su - go bash -c 'echo "db.name=cruise"  >> /etc/go/postgresqldb.properties'})
      sh(%Q{su - go bash -c 'echo "db.user=postgres"  >> /etc/go/postgresqldb.properties'})
      sh(%Q{su - go bash -c 'echo "db.password=postgres"  >> /etc/go/postgresqldb.properties'})
    end

    task :change_postgres_addons_jar do
      if ENV['USE_POSTGRES']
        addon = addon_for ENV['GO_VERSION']
        sh(%Q{su - go bash -c 'rm -rf /var/lib/go-server/addons/*.jar ; cp /vagrant/addons/#{addon} /var/lib/go-server/addons/'})
        sh("/etc/init.d/go-server restart")
      end
    end

    task :start_agent do
      sh('/etc/init.d/go-agent start')
    end

    task :check_service_is_up do
      service_status
    end

    task :check_service_is_up_again do
      service_status
    end

    def server_running?
      sleep 5
      ping_server.is_a?(Net::HTTPSuccess)
    rescue => e
      false
    end

    def ping_server
      uri = URI("http://localhost:8153/go/auth/login")
      Net::HTTP.get_response(uri)
    end

    def wait_to_start
      Timeout.timeout(120) do
        loop do
          begin
            break if server_running?
          rescue Errno::ECONNREFUSED
            sleep 5
          end
        end
      end
    end

    def service_status
      puts 'wait for server to come up'
      wait_to_start

      # check if server startup with postgres only
      if ENV['USE_POSTGRES']
        Timeout.timeout(120) do
          loop do
            if File.open('/var/log/go-server/go-server.log').lines.any? {|line| line.include?('Using connection configuration jdbc:postgresql://localhost:5432/cruise [User: postgres] [Password Encrypted: false]')}
              p 'server up with postgres'
              break
            end
          end
        end
      end

      puts 'wait for agent to come up'
      Timeout.timeout(180) do
        loop do
          agents = JSON.parse(open('http://localhost:8153/go/api/agents', 'Accept' => agent_api_version).read)['_embedded']['agents']

          if agents.any? {|a| a['agent_state'] == 'Idle'}
            puts 'Agent is up'
            break
          end
        end
      end
    end

    task :create_pipeline do
      url = 'http://localhost:8153/go/api/admin/pipelines'
      puts 'create a pipeline'
      sh(%Q{curl --silent --fail --location --dump-header - -X POST -H "Accept: #{pipeline_api_version}" -H "Content-Type: application/json" --data "@/vagrant/provision/filesystem/pipeline.json" #{url}})
    end

    task :create_pipeline_by_config do
      Rake::Task["#{os}:create_pipeline"].reenable
      Rake::Task["#{os}:create_pipeline"].invoke
    end

    task :unpause_pipeline do
      url = "http://localhost:8153/go/api/pipelines/#{PIPELINE_NAME}/unpause"
      puts 'unpause the pipeline'
      sh(%Q{curl --silent --fail --location --dump-header - -X POST -H "Accept: #{pipeline_pause_api_version}" -H "Confirm: true" -H "X-GoCD-Confirm: true" #{url}})
    end

    def trigger_pipeline
      url = "http://localhost:8153/go/api/pipelines/#{PIPELINE_NAME}/schedule"
      puts 'trigger the pipeline'
      sh(%Q{curl --silent --fail --location --dump-header - -X POST -H "Accept: #{pipeline_schedule_api_version}" -H "Confirm: true" -H "X-GoCD-Confirm: true" #{url}})
    end

    task :trigger_pipeline_first do
      if ENV['GO_INITIAL_VERSION'] =~ /\A15/
        trigger_pipeline
      else
        Rake::Task["#{os}:unpause_pipeline"].reenable
        Rake::Task["#{os}:unpause_pipeline"].invoke
      end
    end

    task :trigger_pipeline_again do
      trigger_pipeline
    end

    task :check_pipeline_pass_with_label_1 do
      check_pipeline_in_cctray 1
    end

    task :check_pipeline_pass_with_label_2 do
      check_pipeline_in_cctray 2
    end

    def create_pipeline
      url = "http://localhost:8153/go/tab/admin/pipelines/#{PIPELINE_NAME}.json"
      uri = URI(url)
      request = Net::HTTP::Post.new(uri.path)
      request.set_form_data({"scm" => "git", "url" => "https://github.com/agoyal-git/testrepo.git", "builder" => "exec", "command" => "ls"})
      response = Net::HTTP.start(uri.host, uri.port) do |http|
        http.request(request)
      end
      puts "Successfully created pipeline" if response.is_a?(Net::HTTPCreated)
      raise "Pipeline creation failed with error: #{response.body}" unless response.is_a?(Net::HTTPCreated)
    end

    def check_pipeline_in_cctray(label)
      cctray_response = nil
      Timeout.timeout(180) do
        loop do
          cctray_response = open("http://localhost:8153/go/cctray.xml").read
          if cctray_response.include? %Q(<Project name="#{PIPELINE_NAME} :: defaultStage" activity="Sleeping" lastBuildStatus="Success" lastBuildLabel="#{label}")
            puts "Pipeline completed successfully"
            break
          end
        end
      end
    rescue Timeout::Error
      raise "Pipeline was not built successfully. Wait timed out. The CCTray response was: #{cctray_response}"
    end

    def current_gocd_version
      Gem::Version.new(JSON.parse(open('http://localhost:8153/go/api/version', 'Accept' => GoCDApiVersion::V1).read)['version'])
    end

    def agent_api_version
      if current_gocd_version >= Gem::Version.new('16.10.0')
        GoCDApiVersion::V4
      else
        GoCDApiVersion::V3
      end
    end

    def pipeline_api_version
      if current_gocd_version >= Gem::Version.new('17.12.0')
        GoCDApiVersion::V5
      elsif current_gocd_version >= Gem::Version.new('17.4.0')
        GoCDApiVersion::V4
      elsif current_gocd_version >= Gem::Version.new('16.10.0')
        GoCDApiVersion::V3
      elsif current_gocd_version >= Gem::Version.new('16.7.0')
        GoCDApiVersion::V2
      else
        GoCDApiVersion::V1
      end
    end

    def pipeline_pause_api_version
      if current_gocd_version >= Gem::Version.new('18.2.0')
        GoCDApiVersion::V1
      else
        'text/plain'
      end
    end

    def pipeline_schedule_api_version
      if current_gocd_version >= Gem::Version.new('18.2.0')
        GoCDApiVersion::V1
      else
        'text/plain'
      end
    end

    def dashboard_api_version
      if current_gocd_version >= Gem::Version.new('15.3.0')
        GoCDApiVersion::V1
      end
    end

    def check_pipeline_status
      dashboard_response = nil
      Timeout.timeout(180) do
        loop do
          sleep 5
          dashboard_response = JSON.parse(open('http://localhost:8153/go/api/dashboard', 'Accept' => dashboard_api_version).read)

          if dashboard_response["_embedded"]["pipeline_groups"][0]["_embedded"]["pipelines"][0]["_embedded"]["instances"][0]["_embedded"]["stages"][0]["status"] == 'Passed'
            puts 'Pipeline completed with success'
            break
          end
        end
      end
    rescue Timeout::Error
      raise "Pipeline was not built successfully. The dashboard response was: #{dashboard_response}"
    end

    def server_version
      versions = JSON.parse(open('http://localhost:8153/go/api/version', 'Accept' => GoCDApiVersion::V1).read)
      "#{versions['version']}-#{versions['build_number']}"
    end

    def addon_for(core)
      versions_map = JSON.parse(File.read('/vagrant/addons/addon_builds.json'))
      versions_map.select {|v| v['gocd_version'] == core}.last['addons']['postgresql']
    end

    task :fresh => [:repo, :install_latest_version, :start_agent, :check_service_is_up, :create_pipeline, :unpause_pipeline, :check_pipeline_pass_with_label_1]
    task :setup => [:repo, :install_old_version, :start_agent, :check_service_is_up, :create_pipeline_by_config, :trigger_pipeline_first, :check_pipeline_pass_with_label_1]
    task :upgrade => [:setup, :install_server, :change_postgres_addons_jar, :check_service_is_up_again, :trigger_pipeline_again, :check_pipeline_pass_with_label_2]

    task :upgrade_test do
      upgrade_list = ENV['UPGRADE_VERSIONS_LIST']
      p "this is the upgrade list #{upgrade_list}"
      upgrade_list.split(/\s*,\s*/).each do |version|
        begin
          ENV['GO_INITIAL_VERSION'] = version
          puts "upgrade test. Version FROM: #{ENV['GO_INITIAL_VERSION']} TO: #{ENV['GO_VERSION']}"
          Rake::Task["#{os}:upgrade"].invoke
        rescue => e
          raise "Installer testing failed. Error message #{e.message}"
        ensure
          Rake::Task["#{os}:upgrade"].reenable
          Rake::Task["#{os}:setup"].reenable
          Rake::Task["#{os}:repo"].reenable
          Rake::Task["#{os}:install_old_version"].reenable
          Rake::Task["#{os}:start_agent"].reenable
          Rake::Task["#{os}:check_service_is_up"].reenable
          Rake::Task["#{os}:create_pipeline_by_config"].reenable
          Rake::Task["#{os}:trigger_pipeline_first"].reenable
          Rake::Task["#{os}:check_pipeline_pass_with_label_1"].reenable
          Rake::Task["#{os}:install_server"].reenable
          Rake::Task["#{os}:change_postgres_addons_jar"].reenable
          Rake::Task["#{os}:check_service_is_up_again"].reenable
          Rake::Task["#{os}:trigger_pipeline_again"].reenable
          Rake::Task["#{os}:check_pipeline_pass_with_label_2"].reenable
        end
      end
    end

  end
end
